[build-system]
requires = ["flit_core >=3.9,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "hikari-lightbulb"
readme = "README.md"
requires-python = ">=3.10.0,<3.14"
authors = [{name = "tandemdude", email = "tandemdude1@gmail.com"}]
dynamic = ["version", "description"]

[project.urls]
Homepage = "https://github.com/tandemdude/cpusim"
Repository = "https://github.com/tandemdude/cpusim"

[project.optional-dependencies]
gui = []
dev = ["nox==2024.10.9"]
"dev.format" = ["ruff==0.7.4"]
"dev.typecheck" = [
    "pyright==1.1.389",
    "typing-extensions>=4.12.2, <5",
]
"dev.slotscheck" = ["slotscheck>=0.19.0, <1"]
"dev.test" = [
    "pytest>=8.3.2, <9",
    "pytest-cov>=5.0.0, <7",
    "pytest-randomly>=3.15.0, <4"
]

[tool.flit.module]
name = "cpusim"

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
preview = true
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # Pyflakes
    "I",     # isort
    "TCH",   # typechecking imports
    "N",     # naming
    "ASYNC", # async lints
    "Q",     # enforce double-quotes
    "RSE",   # avoid needless parens
    "SIM",   # simplification
    "RUF",   # ruff lints
    "D2",    # Docstring formatting
    "D213",  # Multi-line docstring summary should start at the second line
    "D3",    # Use triple-quotes
    "D415",  # First line of docstring should end with period
    "D417",  # Missing argument descriptions in docstring
    "D418",  # No docstring on @overload
    "D419",  # No empty docstring
    "ANN2",  # Function missing return type annotation
]
fixable = [
    "I",     # isort errors
    "TCH",   # typechecking imports
    "F401",  # unused import
    "F404",  # late __future__ import
    "F541",  # f-string with no placeholders
    "RUF022",  # __all__ is not sorted
    "RUF023",  # {}.__slots__ is not sorted
]
ignore = [
    "D212",  # Multi-line docstring summary should start at the first line
    "RUF001", # ambiguous character
    "N818",   # exception name should end in Error
    "D205",   # 1 blank line required between summary line and description
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.per-file-ignores]
# F401 (Unused import) - init files don't use their imports
# F403 (Star import used) - hopefully we're sensible enough to know what objects modules contain
# F405 (Import via star) - everything is imported to top-level
"__init__.py" = ["F401", "F403", "F405"]

# N802 (Function name should be lowercase)
# RUF029 (Function is declared async but does not use async/await)
"tests/*.py" = ["N802", "RUF029"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.slotscheck]
strict-imports = true
require-superclass = true
require-subclass = true

[tool.pyright]
include = ["cpusim"]
exclude = ["docs", ".github"]
pythonVersion = "3.10"
typeCheckingMode = "strict"

reportUnnecessaryTypeIgnoreComment = "error"
reportMissingTypeStubs = "none"
reportImportCycles = "none" # Doesn't account for TYPE_CHECKING
reportIncompatibleMethodOverride = "none"  # This relies on ordering for keyword-only arguments
reportOverlappingOverload = "none" # Type-Vars in last overloads may interfere
reportIncompatibleVariableOverride = "none" # Cannot overwrite abstract properties using attrs
reportPrivateUsage = "none" # Too annoying
reportUnknownMemberType = "warning" # NetworkX is untyped :/

[tool.pytest.ini_options]
filterwarnings = [
    'ignore:.*"@coroutine" decorator is deprecated.*:DeprecationWarning',
    "ignore:.*The loop argument is deprecated.*:DeprecationWarning"
]

[tool.coverage.report]
exclude_also = ["if t.TYPE_CHECKING:"]
